module Example.Hooks exports (
    main,
)

import (std) Bool
import (std) Maybe (
    Maybe(..),
)

import App
import Element (
    Element,
)
import Events
import Html


main = fn (container: Element): Effect(Unit) -> App.mount(
    {
        container = container,
        init = fn () -> {state = initial_state, task = Nothing },
        view = view,
        update = update,
    },
)

type alias State = { is_mounted: Bool, should_render: Bool }

initial_state: State = { is_mounted = false, should_render = false }

type alias Html = Html.Html(Event)

view = fn (state: State): Array(Html) -> [
    Html.div(
        [],
        [
            Html.button([Events.on_click(Toggle)], [Html.text("toggle")]),
            if state.should_render then
                Html.div(
                    [
                        Events.on_mount(fn (_) -> Mounted),
                        Events.on_unmount(Unmounted),
                    ],
                    [Html.text("boo")],
                )
            else
                Html.empty,
        ],
    ),
]

type Event =
    | Toggle
    | Mounted
    | Unmounted

type alias Next = App.Next(State, Event)

update = fn (state: State, event: Event): Next ->
    match event with
    | Toggle -> {
        state = {
            state |should_render = Bool.not(state.should_render)},
        task = Nothing,
    }
    | Mounted -> { state = { state | is_mounted = true }, task = Nothing }
    | Unmounted -> { state = { state | is_mounted = false }, task = Nothing }
    end
