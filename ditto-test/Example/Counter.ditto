module Example.Counter exports (
    main,
)

import (std) Int
import (std) Maybe (
    Maybe(..),
)

import App
import Element (
    Element,
)
import Events
import Html


main = fn (container: Element): Effect(Unit) -> App.mount(
    {
        container = container,
        init = fn () -> {state = initial_state, task = Nothing },
        view = view,
        update = update,
    },
)

type alias State = { count: Int }

initial_state: State = { count = 0 }

type alias Html = Html.Html(Event)

view = fn (state: State): Html -> Html.div(
    [],
    [
        Html.button([Events.on_click(Decrement)], [Html.text("-")]),
        Html.text(Int.to_string(state.count)),
        Html.button([Events.on_click(Increment)], [Html.text("+")]),
    ],
)

type Event =
    | Increment
    | Decrement

type alias Next = App.Next(State, Event)

update = fn (state: State, event: Event): Next ->
    match event with
    | Increment -> {
        state = { state | count = Int.add(state.count, 1) },
        task = Nothing,
    }
    | Decrement -> {
        state = { state | count = Int.subtract(state.count, 1) },
        task = Nothing,
    }
    end
