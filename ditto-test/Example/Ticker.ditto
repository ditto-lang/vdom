module Example.Ticker exports (
    main,
)

import (js-task) Task (
    Task,
    Duration(..),
)

import (std) Int
import (std) Maybe (
    Maybe(..),
)
import (std) Never (
    Never,
)

import App
import Element (
    Element,
)
import Html


main = fn (container: Element): Effect(Unit) -> App.mount(
    {
        container = container,
        init = fn () -> { state = initial_state, task = Just(tick) },
        view = view,
        update = update,
    },
)

type alias State = { ticks: Int }

initial_state: State = { ticks = 0 }

type alias Html = Html.Html(Event)

view = fn (state: State): Array(Html) -> [Html.text(Int.to_string(state.ticks))]

type Event = Tick

type alias Next = App.Next(State, Event)

update = fn (state: State, event: Event): Next ->
    match event with
    | Tick -> {
        state = { state | ticks = Int.add(state.ticks, 1) },
        task = Just(tick),
    }
    end

tick: Task(Event, Never) =
    Task.sleep(Seconds(1))
    |> Task.map(fn (_) -> Tick)
